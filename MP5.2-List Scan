// MP Scan
// Given a list (lst) of length n
// Output its prefix sum = {lst[0], lst[0] + lst[1], lst[0] + lst[1] + ...
// +
// lst[n-1]}

#include <wb.h>

#define BLOCK_SIZE 1024 //@@ You can change this

#define wbCheck(stmt)                                                     \
  do {                                                                    \
    cudaError_t err = stmt;                                               \
    if (err != cudaSuccess) {                                             \
      wbLog(ERROR, "Failed to run stmt ", #stmt);                         \
      wbLog(ERROR, "Got CUDA error ...  ", cudaGetErrorString(err));      \
      return -1;                                                          \
    }                                                                     \
  } while (0)

__global__ void scan(float *input, float *output, int len, int scanSums) {
  //@@ Modify the body of this function to complete the functionality of
  //@@ the scan on the device
  //@@ You may need multiple kernel calls; write your kernels before this
  //@@ function and call them from the host
  int loadIdx;
  int loadStride;
  
  if (!scanSums) {
    loadIdx = threadIdx.x + (blockIdx.x * blockDim.x * 2);
    loadStride = blockDim.x;
  } else {
    loadIdx = (threadIdx.x + 1) * (blockDim.x * 2) - 1;
    loadStride = BLOCK_SIZE * blockDim.x * 2;
  }

  int storeX = threadIdx.x + (blockIdx.x * blockDim.x * 2);

  __shared__ float scanSection[BLOCK_SIZE * 2];

  for(int i = 0; i < 2; i++){
     if ((loadIdx  + i * loadStride) < len)
      scanSection[threadIdx.x + i * blockDim.x] = input[loadIdx + i * loadStride];
    else
      scanSection[threadIdx.x + i * blockDim.x] = 0.0; 
  }

  for (int stride = 1; stride <= blockDim.x; stride *= 2) {
    __syncthreads();

    int index = (threadIdx.x + 1) * 2 * stride - 1;

    if (index < 2 * blockDim.x) {
      scanSection[index] += scanSection[index - stride];
    }
  }

  for (int stride = blockDim.x / 2; stride > 0; stride /= 2) {
    __syncthreads();

    int index = (threadIdx.x + 1) * 2 * stride - 1;

    if (index + stride < 2 * blockDim.x) {
      scanSection[index + stride] += scanSection[index];
    }
  }

  __syncthreads();
  for(int i = 0; i < 2; i++){
     if ((storeX + i * blockDim.x) < len)
      output[storeX + i * blockDim.x] = scanSection[threadIdx.x + i * blockDim.x];
  }
  
}

__global__ void add(float *input, float *output, float *sum, int len) {
  
  int x = threadIdx.x + (blockIdx.x * blockDim.x * 2);

  __shared__ float increment;
  if (threadIdx.x == 0)
    increment = blockIdx.x == 0 ? 0 : sum[blockIdx.x - 1];
  
  __syncthreads();

  for(int i = 0; i < 2; i++){
    output[x + i * blockDim.x] = input[x + i * blockDim.x] + increment;
  }
  
}


int main(int argc, char **argv) {
  wbArg_t args;
  float *hostInput;  // The input 1D list
  float *hostOutput; // The output list
  float *deviceInput;
  float *deviceOutput;
  float *deviceScanTemp;
  float *deviceScanSums;
  int numElements; // number of elements in the list

  args = wbArg_read(argc, argv);

  wbTime_start(Generic, "Importing data and creating memory on host");
  hostInput = (float *)wbImport(wbArg_getInputFile(args, 0), &numElements);
  hostOutput = (float *)malloc(numElements * sizeof(float));
  wbTime_stop(Generic, "Importing data and creating memory on host");

  wbLog(TRACE, "The number of input elements in the input is ",
        numElements);
  
   
  wbTime_start(GPU, "Allocating GPU memory.");
  wbCheck(cudaMalloc((void **)&deviceInput, numElements * sizeof(float)));
  wbCheck(cudaMalloc((void **)&deviceScanTemp, numElements * sizeof(float)));
  wbCheck(cudaMalloc((void **)&deviceScanSums, 2 * BLOCK_SIZE * sizeof(float)));
  wbCheck(cudaMalloc((void **)&deviceOutput, numElements * sizeof(float)));
  wbTime_stop(GPU, "Allocating GPU memory.");

  wbTime_start(GPU, "Clearing output memory.");
  wbCheck(cudaMemset(deviceOutput, 0, numElements * sizeof(float)));
  wbTime_stop(GPU, "Clearing output memory.");

  wbTime_start(GPU, "Copying input memory to the GPU.");
  wbCheck(cudaMemcpy(deviceInput, hostInput, numElements * sizeof(float),
                     cudaMemcpyHostToDevice));
  wbTime_stop(GPU, "Copying input memory to the GPU.");

  //@@ Initialize the grid and block dimensions here
  int scanGrid = ceil(numElements / float(2 * BLOCK_SIZE));

  wbTime_start(Compute, "Performing CUDA computation");
  //@@ Modify this to complete the functionality of the scan
  //@@ on the deivce
  scan<<<scanGrid, BLOCK_SIZE>>>(deviceInput, deviceScanTemp, numElements, 0);
  cudaDeviceSynchronize();
  
  scan<<<1, BLOCK_SIZE>>>(deviceScanTemp, deviceScanSums, numElements, 1);
  cudaDeviceSynchronize();
  
  add<<<scanGrid, BLOCK_SIZE>>>(deviceScanTemp, deviceOutput, deviceScanSums, numElements);
  cudaDeviceSynchronize();
  
  wbTime_stop(Compute, "Performing CUDA computation");

  wbTime_start(Copy, "Copying output memory to the CPU");
  wbCheck(cudaMemcpy(hostOutput, deviceOutput, numElements * sizeof(float),
                     cudaMemcpyDeviceToHost));
  wbTime_stop(Copy, "Copying output memory to the CPU");

  wbTime_start(GPU, "Freeing GPU Memory");
  cudaFree(deviceInput);
  cudaFree(deviceOutput);
  wbTime_stop(GPU, "Freeing GPU Memory");

  wbSolution(args, hostOutput, numElements);

  free(hostInput);
  free(hostOutput);

  return 0;
}
